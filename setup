#!/bin/bash

err () {
    local msg
    msg="${1}"
    printf 'Error: %s\n' "${msg}" >&2
    return
}

# Installs a plugin from a git repository URL and creates help tags if a doc
# directory is present
clone_plugin () {
    local plugin_url
    local plugin_dir
    plugin_url="${1}"
    plugin_dir="${2}"

    mkdir -p "${plugin_dir}"
    if ! git clone "${plugin_url}" "${plugin_dir}"; then
        return 1
    else
        if [[ -d "${plugin_dir}/doc" ]]; then
            # Documentation is not necessarily required for Vim plugins, but if
            # it's there then we build it
            if ! vim -u NONE -c "helptags ${plugin_dir}/doc" -c q; then
                return 0
            fi
        fi
    fi
    return 0
}

# This needs to be run as a command, not sourced into a running subshell
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    err "Script needs to be run as a command"
    return 1
fi

command -v git >/dev/null 2>&1 || \
    { err "Could not find git in PATH."; exit 1; }

# Make a location for using Vim's built-in package support (we install a very
# minimal set of packages).
mkdir -p "${PWD}/pack"

plugin_dirs=(
    "${PWD}/pack/tpope/start/fugitive"
    "${PWD}/pack/tpope/start/commentary"
    "${PWD}/pack/tpope/start/vinegar"
    "${PWD}/pack/junegunn/start/easy-align"
)

plugin_urls=(
    "https://tpope.io/vim/fugitive.git"
    "https://tpope.io/vim/commentary.git"
    "https://tpope.io/vim/commentary.git"
    "https://github.com/junegunn/vim-easy-align.git"
)

# Iterate over URL and directories to install these plugins
retval=0
for i in "${!plugin_dirs[@]}"; do
    if ! clone_plugin "${plugin_urls[i]}" "${plugin_dirs[i]}"; then
        err "Failed cloning plugin at URL ${plugin_urls[i]}"
        retval=1
    fi
done

exit "${retval}"


